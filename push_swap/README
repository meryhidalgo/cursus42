Este proyecto te hará ordenar datos en un stack, con un conjunto limitado de
instrucciones, y utilizando el menor número posible de acciones. Para tener éxito, deberás probar a utilizar varios tipos de algoritmos 
y elegir la solución más apropiada (de entre muchas posibles) para conseguir la ordenación optimizada de los datos.

• Para empezar:
  ◦ El stack a contiene una cantidad aleatoria de números positivos y/o negativos, nunca duplicados.
  ◦ El stack b está vacío.
• El objetivo es ordenar los números del stack a en orden ascendente. Para hacerlo
tienes las siguientes operaciones a tu disposición:
    sa swap a: Intercambia los dos primeros elementos del stack a. No hace nada si hay uno o menos elementos.
    sb swap b: Intercambia los dos primeros elementos del stack b. No hace nada si hay uno o menos elementos.
    ss swap ayswap balavez.
    pa push a: Toma el primer elemento del stack b y lo pone el primero en el stack
    a. No hace nada si b está vacío.
    pb push b: Toma el primer elemento del stack a y lo pone el primero en el stack
    b. No hace nada si a está vacío.
    ra rotate a: Desplaza hacia arriba todos los elementos del stack a una posición,
    de forma que el primer elemento se convierte en el último.
    rb rotate b: Desplaza hacia arriba todos los elementos del stack b una posición, de forma que el primer elemento se convierte en el último.
    rr ra y rb al mismo tiempo.
    rra reverse rotate a: Desplaza hacia abajo todos los elementos del stack a una
    posición, de forma que el último elemento se convierte en el primero.
    rrb reverse rotate b: Desplaza hacia abajo todos los elementos del stack b una posición, de forma que el último elemento se convierte en el primero.
    rrr rra y rrb al mismo tiempo.


Debes escribir un programa llamado push_swap que recibirá como argumento el stack a con el formato de una lista de enteros. 
El primer argumento debe ser el que esté encima del stack (cuidado con el orden).
El programa debe mostrar la lista de instrucciones más corta posible para ordenar el stack a, de menor a mayor, donde el número menor se sitúe en la cima del stack.
Las instrucciones deben separarse utilizando un “\n” y nada más.

El objetivo es ordenar el stack con el mínimo número de operaciones posible.
