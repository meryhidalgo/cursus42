En este proyecto, aprenderás los principios básico de hilar un proceso.
Vas a aprender a como crear hilos y descubrirás los mutex.


• Uno o más filósofos se sientan en una mesa redonda.
En el centro de la mesa se encuentra un gran bol de espaguetis.
• Los filósofos solo pueden comer, pensar, o dormir.
Mientras están comiendo, no pueden pensar ni dormir;
Mientras están pensando, no pueden dormir ni comer;
Y, por supuesto, mientras están durmiendo, no pueden comer ni pensar.
• También hay tenedores en la mesa, tantos tenedores como filósofos.
• Porque coger y comer espaguetis con un solo tenedor puede ser incomodo, los filó-
sofos deben tomar el tenedor de la derecha y el de la izquierda, uno en cada mano.
• Cuándo un filósofo termine de comer, dejará los tenedores en la mesa e inmediata- mente empezará a dormir. Una vez se despierte, empezará a pensar nuevamente. La simulación se detendrá cuando un filósofo muere por inanición.
• Todos los filósofos necesitan comer y nunca deben morir de hambre.
• Los filósofos no hablan entre ellos.
• Los filósofos no saben si otro filósofo va a morir.
• ¡No debería hacer falta decir que todos deben evitar morir!


Los programas deben aceptar los siguientes argumentos: number_of_philosophers time_to_die time_to_eat time_to_sleep [number_of_times_each_philosopher_must_eat]
◦ number_of_philosophers: es el número de filósofos, pero también el número de tenedores.
◦ time_to_die(enmilisegundos):siunfilósofonoempiezaacomerentime_to_die milisegundos desde el comienzo de su ultima comida o desde el principio de la simulación, este morirá.
◦ time_to_eat (en milisegundos): es el tiempo que tiene un filósofo para comer. Durante ese tiempo, tendrá los tenedores ocupados.
◦ time_to_sleep (en milisegundos): es el tiempo que tiene un filósofo para dormir.
◦ number_of_times_each_philosopher_must_eat (argumento opcional): si to- dos los filósofos comen al menos number_of_times_each_philosopher_must_eat veces, la simulación se detendrá. Si no se especifica, la simulación se detendrá con la muerte de un filósofo.
Cada filósofo tendrá asignado un número del 1 al number_of_philosophers.


A la hora de programar: 

• Cada filósofo debe ser un hilo.
• Hay un tenedor entre cada filósofo. por lo tanto, si hay varios filósofos, cada filósofo debe tener un tenedor a su izquierda y otro a su derecha. si solo hay un filósofo, solo habrá un tenedor en la mesa.
• Para prevenir que los filósofos dupliquen los tenedores, deberás proteger los estados de los tenedores con un mutex por cada uno de ellos.
